# git remote add origin repository_url
# git push -u origin master


#  git add -A [ * new worked file adding * ]
#  git reset file-name [ * file disadding from added * ]

===================== new Branch
#  git branch new-brach-name
#  git checkout new-branch [ * switch to new branch * ]

====================== User info
# git config --global user.name "Mona Lisa" [ set global user ] 

================= shortcut
#  git commit -am "Mesage" [ * add and commit * ]
#  git checkout -b branch-name [ * create and switch * ]
	
================== delete branch
#  git branch -d branch-name

===================== Origin Check
#  git remote show origin

================= git commint History
# git log

================ Copy changes form commits to another branch
$ git checkout <anotherBranch>
$ git cherry-pick <commitId> <commitId>

====================== reset commit
$ git reset HEAD~ [rest preview commit which is not pushed]
# git reset {commit id} --hard

=============== delete Files
# git rm file_name.ext [ remove from repostory and also remove from working files ]

====================== Remove from comment
# git commit --soft fine_name

====================== Remove Remote
# git remote rm remote_name

====================== remove file from pushed commit

$ git checkout file_name
$ git commit -am "Message"
  ------- Worked
$ git rm --cache "file_name"


======================== origin add and exist
$ git remote add origin remote_repository_URL
$ git push -u origin master

========================== remove by gitignore files
$ git rm --cached .gitignore

========================== fresh and gitignore files data delete
$ git rm -r --cached .

======================= pull request
$ git pull remote_name branch_name [ update local machine code from server ]

======================= Git tag and releases ======================
$ git tag -a v1.0 -m "development version 1.0" [ add git ]
$ git push origin v1.0 [ release push to server]
$ git tag -d v1.4 [ delete release tag ]
$ git push origin --delete v10.0.0 [Remove tag from remote]

$ git checkout -b new_branch v1.x.x [Create a new branch from tag]

====================== git global information
$ git config --global user.email "your_email"
$ git config --global user.name "your_name"
$ git config --list

===================== git pull
$ git pull origin master

===================== git pull congflict solution
// first commit all current changes
$ git merge master
$ git pull origin master


======================== git file from branch
$ git filter-branch -f "git rm -rf --cached --ignore-unmatch fileName" -- --all

// For All
$ git push --force-with-lease --all
// For brach lease
$ git push --force-with-lease origin $BRANCH



========================= Git removes all sensitive data from all commits, all tags
Step1: install filter repo
	- $ sudo apt install git-filter-repo

Step2: create a file that matches Regular expression with secret data 
	- Example: filename.txt
	- File content:
	```
	oldSecret==>new_secret
	oldSecret2==>new_secret_2
	```
Step3: Pull all tags and commit
	$ git pull --all --tags

Step4: $ git filter-repo --replace-text /home/sajal/Programming/private/api-secret-replace.txt --force

Step5: Push to all tags and commit
	$ git push --tags --force git@github.com:username/repo-name.git
	$ git push --all --force git@github.com:username/repo-name.git
