# Mongo console
  $ mongo
  $ mongo --quiet // Quiet mode

## ------------------------------ Database
# Database List
  $ show dbs;
  
# Create database
  $ use database_name;
# create connection
  $ db.createCollection("username"); // with new collection database will show
  
# Drop database
  $ db.dropDatabase();
  
## ---------------------------- Collection
# Collection list
  $ show connections;
  
# Create collection
  $ db.createCollection("collection_name");
 
# Delete collection
  $ db.collection_name.drop();
  
# Insert data to collection
  $ db.collection_name.insert({"name": "sajal"})
  $ db.users.insert([{name: ""sajal", age: 25},{name: "asik", age: 26}]) // a complete example
  
# ---------------------------- Update collection
  $ db.users.update({"_id" : ObjectId("6102f7736f7ff0217453f1f7")}, {$set: {age: 28}});
  $ db.users.update({age: 28}, {$set: name: "new Name"});

  
## ---------------------------- Database Query
# Get Collection Data
  $ db.collection_name.find(); // get all data
  $ db.collection_name.findOne(); // get first data
  
# Get Collection Data with pretty manner
  $ db.collection_name.find().pretty();
  
# filter collection data
  $ db.collection_name.find({age: 50}) // filter data with age of 50
  $ db.users.find({age: {$gt: 20}}) // filter data with age greaterThan 20
  
# Conditon prefix
  [$gt, $gte, $lt, $lte]
  
## ---------------------------- Database User
# Show all users
  $ show users; // Make use you switch admin users
# Create User
  $ db.createUser({user: "sajal", pwd: "simpleLetter", roles: ["readWrite", "dbAdmin"]})
# Create admin user
  $ db.createUser(
    {
      user: "sajalAdmin",
      pwd: "abc123",
      roles: [
        { role: "userAdminAnyDatabase", db: "admin" },
        { role: "readWriteAnyDatabase", db: "admin" }
      ]
    }
  )
# Delete User
  $ db.dropUser("userName");
  
## --------------------------- Export database
# export all database
  $ mongodump
# export single databse
  $ mongodump -d database_name
#export single collection
  $ mongodump -d database_name -c collection_name
  
# export with archive [useable on docker]
  $ mongodump -d store-api --archive=store-api.archive

# Export database with URL  
$ mongodump --host=<example-domain.com> --port=27017 --username=<username> --authenticationDatabase=admin --out=/opt/backup/mongodump-2022-03-24
  
  
## --------------------------- import database
  $ mongorestore -d new_database_name /dump/store-api
  $ mongorestore -d database_name -c collection_name /dump/users.bson
  
# restore using host
  
  $ mongorestore mongodb://<USERNAME>:<PASSWORD>@<IP_24.79.753.109>:<PORT> <DUMP_DATABASE_PATH>
    Example: mongorestore mongodb://super_duper_admin:simple_pass@24.79.753.109:27017 /opt/backup/mongodump-2022-03-24
  
# restore with archive file in docker
  $ docker exec -i store-mongo sh -c "mongorestore --archive --username your_username --password your_password" < ./store-api.archive
  

----------------------------------------
Access with admin user
Step #1:
  $ mongo
Step #2:
  $ use admin
 Step #3:
  $ db.auth("username", "password")

-----------------------------------------

Ubuntu install reffer Link: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

## No.1 Start MongoDB
  $ sudo systemctl start mongod
  // If you receive an error similar to the following when starting mongod:
  $ sudo systemctl daemon-reload
  
## No.2 Verify that MongoDB has started successfully
  $ sudo systemctl status mongod
  // You can optionally ensure that MongoDB will start following a system reboot by issuing the following command
  $ sudo systemctl enable mongod
## No.3 Stop MongoDB

  $ sudo systemctl stop mongod
## No.4 Restart MongoDB
  $ sudo systemctl restart mongod
  
## No.5 Begin using MongoDB
  $ mongo
  
--------------------------------------------------------
## Access docker mongo container
  $ docker exec -it containerName bash/sh
## Access mongosh from docker
  $ mongosh
  $ mongosh -u <username> -p <password> // With root admin
    - example: mongosh -u root -p mypassword

---------------------------------------------------------
# Access Mongodb from Kubernetes Cluster
## Access server and create bridge with local machine
  $ sudo ssh -i ~/directory/ssh-key/id_rsa <username>@<server> -L 27048:localhost:27048
## Forward mongo pod port
  $ kubectl port-forward -n <namespace> <pod-name> 27048:27017
## Acces from mongo compass string
  - mongodb://<username>:<server>@localhost:27048/?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=false

